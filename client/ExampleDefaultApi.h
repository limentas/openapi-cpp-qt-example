/**
 * Sample API
 * Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
 *
 * The version of the OpenAPI document: 0.1.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef Example_ExampleDefaultApi_H
#define Example_ExampleDefaultApi_H

#include "ExampleHelpers.h"
#include "ExampleHttpRequest.h"
#include "ExampleServerConfiguration.h"
#include "ExampleOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace oapi_example {

class ExampleDefaultApi : public QObject {
    Q_OBJECT

public:
    ExampleDefaultApi(const int timeOut = 0);
    ~ExampleDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, ExampleServerVariable> &variables = QMap<QString, ExampleServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, ExampleServerVariable> &variables =  QMap<QString, ExampleServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, ExampleServerVariable> &variables =  QMap<QString, ExampleServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    void usersGet();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<ExampleServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    ExampleHttpRequestInput _latestInput;
    ExampleHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void usersGetCallback(ExampleHttpRequestWorker *worker);

Q_SIGNALS:

    void usersGetSignal(QList<QString> summary);

    void usersGetSignalFull(ExampleHttpRequestWorker *worker, QList<QString> summary);

    Q_DECL_DEPRECATED_X("Use usersGetSignalError() instead")
    void usersGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use usersGetSignalErrorFull() instead")
    void usersGetSignalEFull(ExampleHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalErrorFull(ExampleHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace oapi_example
#endif
